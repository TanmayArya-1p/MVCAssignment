{
  "openapi": "3.1.0",
  "info": {
    "title": "InOrder API",
    "version": "1.0.0"
  },
  "components": {
    "securitySchemes": {
      "AuthHeader": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "in": "header"
      },
      "RefreshHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "refreshToken"
      }
    }
  },
  "paths": {
    "/api/auth/register": {
      "post": {
        "summary": "Register a new user",
        "security": null,
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Register a new user",
        "security": null,
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "authToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "Invalidate user refresh token and logout",
        "security": [
          {
            "AuthHeader": []
          },
          {
            "RefreshHeader": []
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "get": {
        "summary": "Refresh auth token.",
        "description": "The new auth and refresh tokens are returned in the Set-Cookie response header.",
        "security": [
          {
            "AuthHeader": []
          },
          {
            "RefreshHeader": []
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/auth/verify": {
      "get": {
        "summary": "Validate user's session and if expired then re-issue auth and refresh token",
        "security": [
          {
            "AuthHeader": []
          },
          {
            "RefreshHeader": []
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/items": {
      "get": {
        "summary": "Get items",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Initial offset for pagination",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Items"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "summary": "Create new item",
        "description": "Need to have authorization of CHEF or above to perform this request",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Items"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/items/{itemid}": {
      "get": {
        "summary": "Get specific item by itemID",
        "parameters": [
          {
            "in": "path",
            "name": "itemid",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of item to get"
          }
        ],
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Items"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "summary": "Delete item",
        "description": "Need to have authorization of CHEF or above to perform this request",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Items"
        ],
        "parameters": [
          {
            "name": "itemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "summary": "Update an existing item's properties",
        "description": "Need to have authorization of CHEF or above to perform this request",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Items"
        ],
        "parameters": [
          {
            "name": "itemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "required": false
                  },
                  "description": {
                    "type": "string",
                    "required": false
                  },
                  "price": {
                    "type": "number",
                    "required": false
                  },
                  "updtags": {
                    "type": "array",
                    "required": false,
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/items/upload": {
      "post": {
        "summary": "Upload image of an item",
        "description": "Need to have authorization of CHEF or above to perform this request",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Items"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/items/tags": {
      "get": {
        "summary": "Get all existing item tags",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Items"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/orders/item/{order_item}/bump": {
      "post": {
        "summary": "Bump status of an order item",
        "description": "Status of Order Items progresses like PENDING -\u003E PREPARING -\u003E SERVED",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "order_item",
            "type": "number",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/orders": {
      "get": {
        "summary": "Get all Orders",
        "description": "Need to have authorization of CHEF or above to perform this request",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "description": "Max no of orders to retrieve",
            "in": "query",
            "required": false
          },
          {
            "name": "offset",
            "description": "Offset from the start to fetch orders",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "summary": "Create an order",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "table_no": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/orders/my": {
      "get": {
        "summary": "Get orders issued by the user making the request",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "limit",
            "description": "Max no of orders to retrieve",
            "in": "query",
            "required": false
          },
          {
            "name": "offset",
            "description": "Offset from the start to fetch orders",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/orders/{orderid}": {
      "get": {
        "summary": "Get a specific order and the items ordered in it",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "order_id",
            "type": "number",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "summary": "Delete a specific order and the items ordered in it",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "order_id",
            "type": "number",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "summary": "Update a specific order",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "orderid",
            "in": "path",
            "type": "number",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "preparing",
                      "served",
                      "billed",
                      "paid"
                    ]
                  },
                  "table_no": {
                    "type": "number"
                  },
                  "billable_amount": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/orders/{orderid}/items": {
      "get": {
        "summary": "Get all ordered items in a specific order",
        "description": "If you have the role of CUSTOMER then you must have issued the order to see its items",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "orderid",
            "in": "path",
            "type": "number",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "summary": "Order a new item",
        "description": "If you have the role of CUSTOMER then you must have issued the order to order an item in it",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "orderid",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "item_id": {
                    "required": true,
                    "type": "number"
                  },
                  "quantity": {
                    "required": true,
                    "type": "number"
                  },
                  "instructions": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/orders/{orderid}/bill": {
      "get": {
        "summary": "Get the current bill of the order",
        "description": "If you have the role of CUSTOMER then you must have issued the order to order an item in it",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "orderid",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "resolve",
            "in": "query",
            "type": "string",
            "enum": [false, true],
            "description": "if set to 'true' then the order will be marked as 'BILLED'. Once marked for billing, users will no longer be able to order items in it."
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/orders/{orderid}/pay": {
      "post": {
        "summary": "Mark an order as paid",
        "description": "Must have role of CHEF or above",
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "name": "orderid",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "required": true,
                    "type": "number",
                    "description": "Amount paid by the issuer of the order. Excess will be considered as a tip"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "Get all users",
        "description": "Must be ADMIN",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "description": "Max no of orders to retrieve",
            "in": "query",
            "required": false
          },
          {
            "name": "offset",
            "description": "Offset from the start to fetch orders",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "summary": "Create user",
        "description": "Must be ADMIN",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "required": true
                  },
                  "password": {
                    "type": "string",
                    "required": true
                  },
                  "role": {
                    "type": "string",
                    "required": true,
                    "enum": [
                      "customer",
                      "admin",
                      "chef"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/{userid}": {
      "get": {
        "summary": "Get specific user by id",
        "description": "Must be ADMIN",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "parameters": [
          {
            "name": "userid",
            "description": "ID of user",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "summary": "Delete specific user by id",
        "description": "Must be ADMIN",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "parameters": [
          {
            "name": "userid",
            "description": "ID of user",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Must be ADMIN",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "AuthHeader": []
          }
        ],
        "parameters": [
          {
            "name": "userid",
            "description": "ID of user",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "required": true
                  },
                  "password": {
                    "type": "string",
                    "required": true
                  },
                  "role": {
                    "type": "string",
                    "required": true,
                    "enum": [
                      "customer",
                      "admin",
                      "chef"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "tags": []
}